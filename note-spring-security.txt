Đây là một class cấu hình bảo mật trong Spring Boot dùng Spring Security 
để kiểm soát quyền truy cập các endpoint trong ứng dụng. 
Chúng ta sẽ phân tích từng dòng, từng phần, không bỏ sót chi tiết nào:
📦 1. Khai báo package
package com.example.musifyapi.config;
Đây là tên package nơi class SecurityConfig được đặt.
Theo cấu trúc chuẩn của Java, các class nên được tổ chức theo package để dễ quản lý.
Trong dự án này, có vẻ như musifyapi là tên API chính, và config là nơi chứa các file cấu hình.
📥 2. Import các lớp cần thiết
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.web.SecurityFilterChain;
Mỗi dòng import có vai trò riêng:
Import	                | Giải thích
@Bean	                | Đánh dấu một phương thức là bean – được Spring quản lý.
@Configuration	        | Biến class này thành một class cấu hình (configuration class).
@EnableWebSecurity	    | Kích hoạt Spring Security trên ứng dụng web.
HttpSecurity	        | Dùng để cấu hình bảo mật HTTP – cho phép cấu hình cách các request được xử lý.
AbstractHttpConfigurer  | Cho phép tắt hoặc tùy biến các cấu hình HTTP (ví dụ như CSRF).
SecurityFilterChain	    | Đại diện cho chuỗi filter bảo mật – cấu hình chính để xác định luồng bảo mật.
Customizer	            | Cung cấp các cấu hình mặc định, tiện dụng khi gọi .cors() hoặc các method tương tự.
🔐 3. Class SecurityConfig
@Configuration
@EnableWebSecurity
public class SecurityConfig {
@Configuration: class này là một Java Config, tức là thay vì cấu hình XML, ta dùng Java.
@EnableWebSecurity: bật tính năng Spring Security.
Tên class là SecurityConfig, đúng với chức năng chính là cấu hình bảo mật.
🧱 4. Định nghĩa Bean SecurityFilterChain
@Bean
public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
Đây là phương thức chính cấu hình bảo mật, trả về một SecurityFilterChain, 
là chuỗi các filter mà Spring Security sử dụng để xử lý request.
HttpSecurity http: Đối tượng cấu hình HTTP, dùng để chỉ định:
Những URL nào được phép truy cập
Những URL nào cần xác thực
Bật/tắt CSRF
Cấu hình CORS
Các bộ lọc bảo mật
🌐 5. Cấu hình CORS (Cross-Origin Resource Sharing)
http.cors(Customizer.withDefaults())
.cors(): Bật hỗ trợ CORS – cho phép frontend (thường chạy ở một domain khác) có thể gửi request đến API.
Customizer.withDefaults(): Sử dụng cấu hình CORS mặc định. Nếu muốn tùy chỉnh, 
bạn có thể viết CorsConfigurationSource.
🛡️ 6. Vô hiệu hóa CSRF
.csrf(AbstractHttpConfigurer::disable)
.csrf(): Bảo vệ khỏi tấn công Cross-Site Request Forgery.
AbstractHttpConfigurer::disable: Tắt tính năng này. Lý do:
CSRF chủ yếu dùng cho các ứng dụng web có session.
Đối với REST API (stateless, dùng JWT hoặc token), CSRF không cần thiết.
📜 7. Cấu hình quyền truy cập cho các URL
.authorizeHttpRequests(
    auth -> auth.requestMatchers(
        "/api/auth/login",
        "/api/auth/register",
        "/api/health"
    )
    .permitAll()
    .anyRequest()
    .authenticated()
)
Chi tiết:
✅ requestMatchers(...)
Xác định danh sách các endpoint công khai – không cần xác thực.
Bao gồm:
/api/auth/login: API đăng nhập
/api/auth/register: API đăng ký
/api/health: Kiểm tra trạng thái hệ thống (health check)
✅ .permitAll()
Cho phép tất cả người dùng, không cần đăng nhập, truy cập các đường dẫn trên.
🔒 .anyRequest().authenticated()
Mọi request khác ngoài 3 endpoint trên đều cần xác thực (phải đăng nhập mới truy cập được).
🔚 8. Trả về SecurityFilterChain
return http.build();
Dòng này xây dựng cấu hình và trả về một SecurityFilterChain.
Spring sẽ sử dụng chain này để xử lý các request HTTP đến.
🧠 Tóm tắt logic tổng thể
Tính năng	Mô tả
CORS	Bật, dùng cấu hình mặc định
CSRF	Tắt (vì API không cần CSRF)
Các endpoint công khai	/api/auth/login, /api/auth/register, /api/health
Các endpoint khác	Yêu cầu xác thực
Mục tiêu	Bảo vệ API, cho phép login/register không cần token, các endpoint khác thì cần token
🧩 Gợi ý nâng cao (tuỳ chọn)
Nếu dùng JWT để xác thực, bạn có thể cần:
Custom AuthenticationFilter để kiểm tra token.
Thêm .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) để vô hiệu session.
Thêm .httpBasic().disable() nếu không dùng HTTP Basic Auth.