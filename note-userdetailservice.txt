D∆∞·ªõi ƒë√¢y l√† gi·∫£i th√≠ch chi ti·∫øt ƒë·∫ßy ƒë·ªß, kh√¥ng b·ªè s√≥t b·∫•t k·ª≥ √Ω n√†o v·ªÅ ƒëo·∫°n m√£ Java b·∫°n cung c·∫•p. M√£ n√†y l√† m·ªôt ph·∫ßn c·ªßa ·ª©ng d·ª•ng Spring Boot s·ª≠ d·ª•ng Spring Security ƒë·ªÉ th·ª±c hi·ªán x√°c th·ª±c ng∆∞·ªùi d√πng d·ª±a tr√™n email.
üßæ T·ªïng quan:
ƒê√¢y l√† m·ªôt class Java c√≥ t√™n AppUserDetailServices trong package com.example.musifyapi.service.
N√≥ ƒë∆∞·ª£c ch√∫ th√≠ch v·ªõi @Service, t·ª©c l√† n√≥ l√† m·ªôt Spring service component, s·∫Ω ƒë∆∞·ª£c Spring qu·∫£n l√Ω v√≤ng ƒë·ªùi v√† t·ª± ƒë·ªông ti√™m ph·ª• thu·ªôc.
Class n√†y implement interface UserDetailsService, ƒë√¢y l√† m·ªôt ph·∫ßn c·ªßa Spring Security, cho ph√©p t√πy bi·∫øn c√°ch t·∫£i ng∆∞·ªùi d√πng t·ª´ c∆° s·ªü d·ªØ li·ªáu ƒë·ªÉ x√°c th·ª±c.
üì¶ C√°c import quan tr·ªçng
T·ª´ Spring Security:
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
UserDetailsService: Interface cung c·∫•p method loadUserByUsername ‚Äî n∆°i logic t·∫£i ng∆∞·ªùi d√πng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a.
UserDetails: ƒê·∫°i di·ªán cho m·ªôt user ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c trong h·ªá th·ªëng.
UsernameNotFoundException: Ngo·∫°i l·ªá n√©m ra khi kh√¥ng t√¨m th·∫•y user t∆∞∆°ng ·ª©ng.
GrantedAuthority: ƒê·∫°i di·ªán cho quy·ªÅn (authority) c·ªßa ng∆∞·ªùi d√πng.
SimpleGrantedAuthority: M·ªôt implement ƒë∆°n gi·∫£n c·ªßa GrantedAuthority.
T·ª´ Lombok v√† Spring:
import org.springframework.stereotype.Service;
import lombok.RequiredArgsConstructor;
@Service: Spring qu·∫£n l√Ω class n√†y nh∆∞ m·ªôt "service".
@RequiredArgsConstructor: Lombok t·ª± ƒë·ªông sinh constructor c√≥ t·∫•t c·∫£ c√°c bi·∫øn final.
C·ªßa project:
import com.example.musifyapi.document.User;
import com.example.musifyapi.repository.UserRepository;
User: Class m√¥ t·∫£ ng∆∞·ªùi d√πng, c√≥ th·ªÉ l√† m·ªôt entity ho·∫∑c document (MongoDB).
UserRepository: L·ªõp ƒë·ªÉ truy v·∫•n ng∆∞·ªùi d√πng t·ª´ database (c√≥ th·ªÉ l√† MongoDB repository).
üß± Chi ti·∫øt class AppUserDetailServices
1. Annotation:
@Service
@RequiredArgsConstructor
@Service: Spring s·∫Ω scan v√† ƒëƒÉng k√Ω class n√†y th√†nh m·ªôt bean ƒë·ªÉ c√≥ th·ªÉ inject v√†o n∆°i kh√°c.
@RequiredArgsConstructor: Sinh constructor ch·ª©a userRepository (ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† final).
2. Field:
private final UserRepository userRepository;
Repository d√πng ƒë·ªÉ truy v·∫•n th√¥ng tin ng∆∞·ªùi d√πng t·ª´ c∆° s·ªü d·ªØ li·ªáu (MongoDB ho·∫∑c m·ªôt ngu·ªìn d·ªØ li·ªáu kh√°c).
3. Ghi ƒë√® ph∆∞∆°ng th·ª©c loadUserByUsername
@Override
public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
    User existingUser = userRepository
        .findByEmail(email)
        .orElseThrow(
            () -> new UsernameNotFoundException("User not found for the email: "+email)
        );
    return new org.springframework.security.core.userdetails.User(
        existingUser.getEmail(), existingUser.getPassword(), getAuthorities(existingUser)
    );
}
Gi·∫£i th√≠ch:
Tham s·ªë email: ƒê√¢y l√† gi√° tr·ªã ƒë·∫ßu v√†o ƒë·ªÉ t√¨m ki·∫øm user ‚Äî trong Spring Security, username c√≥ th·ªÉ l√† username ho·∫∑c email, t√πy c√°ch ta c·∫•u h√¨nh.
userRepository.findByEmail(email): G·ªçi t·ªõi repository ƒë·ªÉ t√¨m ng∆∞·ªùi d√πng theo email.
.orElseThrow(...): N·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng, n√©m ngo·∫°i l·ªá UsernameNotFoundException ‚Äî ƒëi·ªÅu n√†y khi·∫øn Spring Security hi·ªÉu r·∫±ng user kh√¥ng t·ªìn t·∫°i.
N·∫øu t√¨m th·∫•y:
T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng UserDetails b·∫±ng c√°ch d√πng l·ªõp c√≥ s·∫µn c·ªßa Spring Security: org.springframework.security.core.userdetails.User.
Truy·ªÅn v√†o email, password, v√† quy·ªÅn c·ªßa user (ƒë∆∞·ª£c l·∫•y t·ª´ ph∆∞∆°ng th·ª©c getAuthorities()).
4. Ph∆∞∆°ng th·ª©c getAuthorities()
private Collection<? extends GrantedAuthority> getAuthorities(User existingUser){
    return Collections.singletonList(
        new SimpleGrantedAuthority("ROLE_" + existingUser.getRole().name())
    );
}
Gi·∫£i th√≠ch:
Spring Security y√™u c·∫ßu th√¥ng tin v·ªÅ quy·ªÅn (authority) c·ªßa ng∆∞·ªùi d√πng.
·ªû ƒë√¢y, m·ªói ng∆∞·ªùi d√πng c√≥ 1 quy·ªÅn duy nh·∫•t ‚Äî v√≠ d·ª• nh∆∞ "ROLE_USER" ho·∫∑c "ROLE_ADMIN".
existingUser.getRole().name() gi·∫£ ƒë·ªãnh r·∫±ng Role l√† m·ªôt enum, v√≠ d·ª•:
public enum Role {
    USER, ADMIN
}
SimpleGrantedAuthority l√† implementation c·ªßa GrantedAuthority.
D√πng Collections.singletonList(...) ƒë·ªÉ tr·∫£ v·ªÅ danh s√°ch ch·ª©a 1 ph·∫ßn t·ª≠ (quy·ªÅn c·ªßa ng∆∞·ªùi d√πng).
‚úÖ K·∫øt qu·∫£ ho·∫°t ƒë·ªông
Spring Security s·∫Ω s·ª≠ d·ª•ng AppUserDetailServices khi c·∫ßn x√°c th·ª±c ng∆∞·ªùi d√πng. C·ª• th·ªÉ:
Ng∆∞·ªùi d√πng g·ª≠i email + password.
Spring Security g·ªçi loadUserByUsername(email).
H·ªá th·ªëng ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i kh√¥ng.
N·∫øu c√≥:
L·∫•y th√¥ng tin ng∆∞·ªùi d√πng, bao g·ªìm password v√† quy·ªÅn.
So s√°nh password (ƒë√£ m√£ h√≥a) v·ªõi password nh·∫≠p v√†o.
N·∫øu ƒë√∫ng ‚Üí x√°c th·ª±c th√†nh c√¥ng ‚Üí user ƒë∆∞·ª£c "login".
üìå T·ªïng k·∫øt vai tr√≤ c·ªßa AppUserDetailServices
Th√†nh ph·∫ßn	Vai tr√≤
@Service	ƒê√°nh d·∫•u l√† m·ªôt Spring Service
UserDetailsService	Interface d√πng ƒë·ªÉ c·∫•u h√¨nh c√°ch l·∫•y ng∆∞·ªùi d√πng
loadUserByUsername(String email)	T·∫£i ng∆∞·ªùi d√πng t·ª´ DB b·∫±ng email
UserRepository	Truy v·∫•n DB
getAuthorities(User)	Cung c·∫•p role c·ªßa ng∆∞·ªùi d√πng d∆∞·ªõi d·∫°ng GrantedAuthority
N·∫øu b·∫°n c·∫ßn gi·∫£i th√≠ch th√™m v·ªÅ c√°c l·ªõp li√™n quan, v√≠ d·ª• nh∆∞ User, UserRepository, hay c·∫•u h√¨nh Spring Security s·ª≠ d·ª•ng class n√†y nh∆∞ th·∫ø n√†o, m√¨nh c√≥ th·ªÉ gi√∫p b·∫°n ti·∫øp.
